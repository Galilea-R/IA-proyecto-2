from collections import defaultdict

def resolver_criptoaritmetica(ecuacion):
  """
  Resuelve un problema de criptoaritmética utilizando propagación de restricciones y heurísticas.

  Parámetros:
    ecuacion (str): La ecuación de criptoaritmética a resolver.

  Retorno:
    dict: Un diccionario que mapea las variables a sus valores, si se encuentra una solución.
    None: Si no se encuentra una solución.
  """

  # Convertir la ecuación a una lista de tokens.
  tokens = ecuacion.split()

  # Crear un diccionario para almacenar las variables y sus dominios.
  variables = defaultdict(lambda: set(range(10)))

  # Agregar las restricciones de las operaciones.
  for i in range(len(tokens)):
    if tokens[i] in "+-*/":
      if tokens[i] == "+":
        variables[tokens[i-1]].add(variables[tokens[i+1]].pop())
      elif tokens[i] == "-":
        variables[tokens[i-1]].remove(variables[tokens[i+1]].pop())
      elif tokens[i] == "*":
        for valor in list(variables[tokens[i-1]]):
          if valor * variables[tokens[i+1]].pop() not in variables[tokens[i-2]]:
            variables[tokens[i-1]].remove(valor)
      elif tokens[i] == "/":
        for valor in list(variables[tokens[i-1]]):
          if valor not in [x for x in variables[tokens[i+1]] if valor % x == 0]:
            variables[tokens[i-1]].remove(valor)

  # Solución temporal para almacenar las asignaciones.
  solucion = {}

  # Función para asignar un valor a una variable.
  def asignar(variable, valor):
    solucion[variable] = valor
    for otra_variable in variables:
      if variable != otra_variable:
        variables[otra_variable].discard(valor)

  # Función para verificar si una asignación es consistente.
  def consistente(variable, valor):
    for otra_variable in variables:
      if variable != otra_variable and valor in variables[otra_variable]:
        return False
    return True

  # Función para buscar una solución.
  def buscar(variables):
    if not variables:
      return True
    # Convertir dict_keys a una lista
    if len(list(variables.keys())) < min_len:
      return False
    variable = min(list(variables.keys()), key=lambda v: len(variables[v]))

    for valor in sorted(variables[variable]):
      if consistente(variable, valor):
        asignar(variable, valor)
        if buscar(variables - {variable}):
          return True
        else:
          variables[variable].add(valor)
    return False

  # Buscar una solución.
  if buscar(variables.keys()):
    return solucion
  else:
    return None

# Ejemplo de uso
ecuacion = "SEND + MORE = MONEY"
solucion = resolver_criptoaritmetica(ecuacion)

if solucion:
  for letra, valor in solucion.items():
    print(f"{letra} = {valor}")
else:
  print("No se encontró una solución")
